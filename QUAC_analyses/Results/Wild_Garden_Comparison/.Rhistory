QUAC_all_exist_df[dup, cat] <- sum((QUAC_allele_cat[[cat]])> dup_reps[[dup]])
##now determine how many wild alleles were captured per category
QUAC_wild_cap_df[dup, cat] <- round(sum(QUAC_alleles_cap[QUAC_allele_cat[[cat]]] > dup_reps[[dup]])/length(QUAC_allele_cat[[cat]]),4)
##code to store as one data frame
QUAC_allele_cap[dup, cat] <- paste0(signif((QUAC_wild_cap_df[dup,cat]),3), "(", signif(QUAC_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(QUAC_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(QUAC_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_wild_cap_df) <- list_allele_cat
##write out data frames
write.csv(QUAC_all_exist_df, paste0("QUAC_all_exist_df", n_drop_file, ".csv"))
write.csv(QUAC_wild_cap_df, paste0("QUAC_wild_cap_df", n_drop_file, ".csv"))
write.csv(QUAC_allele_cap, paste0("QUAC_all_cap_garden_df", n_drop_file, ".csv"))
}
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(ndrop in c(0,2)){
for(dup in 1:length(dup_reps)){
for(cat in 1:length(list_allele_cat)){
if(ndrop == 0) n_drop_file <- "_dr_0"
if(ndrop == 2) n_drop_file <- ""
##first calculate the frequency categories of alleles in the wild individuals
QUAC_allele_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, as.numeric(n_ind_p_pop), n_drop = ndrop, glob_only = TRUE)
##create a data frame with all of the alleles existing by category
QUAC_all_exist_df[dup, cat] <- sum((QUAC_allele_cat[[cat]])> dup_reps[[dup]])
##now determine how many wild alleles were captured per category
QUAC_wild_cap_df[dup, cat] <- round(sum(QUAC_alleles_cap[QUAC_allele_cat[[cat]]] > dup_reps[[dup]])/length(QUAC_allele_cat[[cat]]),4)
##code to store as one data frame
QUAC_allele_cap[dup, cat] <- paste0(signif((QUAC_wild_cap_df[dup,cat]),3), "(", signif(QUAC_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(QUAC_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(QUAC_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(QUAC_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(QUAC_allele_cap) <- list_allele_cat
##write out data frames
write.csv(QUAC_all_exist_df, paste0("QUAC_all_exist_df", n_drop_file, ".csv"))
write.csv(QUAC_wild_cap_df, paste0("QUAC_wild_cap_df", n_drop_file, ".csv"))
write.csv(QUAC_allele_cap, paste0("QUAC_all_cap_garden_df", n_drop_file, ".csv"))
}
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(ndrop in c(0,2)){
for(dup in 1:length(dup_reps)){
for(cat in 1:length(list_allele_cat)){
if(ndrop == 0) n_drop_file <- "_dr_0"
if(ndrop == 2) n_drop_file <- ""
##first calculate the frequency categories of alleles in the wild individuals
QUAC_allele_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, as.numeric(n_ind_p_pop), n_drop = ndrop, glob_only = TRUE)
##create a data frame with all of the alleles existing by category
QUAC_all_exist_df[dup, cat] <- sum((QUAC_allele_cat[[cat]])> dup_reps[[dup]])
##now determine how many wild alleles were captured per category
QUAC_wild_cap_df[dup, cat] <- round(sum(QUAC_alleles_cap[QUAC_allele_cat[[cat]]] > dup_reps[[dup]])/length(QUAC_allele_cat[[cat]]),4)
##code to store as one data frame
QUAC_allele_cap[dup, cat] <- paste0(signif((QUAC_wild_cap_df[dup,cat]*100),3), "% (", signif(QUAC_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(QUAC_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(QUAC_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(QUAC_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(QUAC_allele_cap) <- list_allele_cat
##write out data frames
write.csv(QUAC_all_exist_df, paste0("QUAC_all_exist_df", n_drop_file, ".csv"))
write.csv(QUAC_wild_cap_df, paste0("QUAC_wild_cap_df", n_drop_file, ".csv"))
write.csv(QUAC_allele_cap, paste0("QUAC_all_cap_garden_df", n_drop_file, ".csv"))
}
round(sum(QUAC_alleles_cap[QUAC_allele_cat[[cat]]] > 1)
)
round(sum(QUAC_alleles_cap[QUAC_allele_cat[[1]]] > 1))
round(sum(QUAC_alleles_cap[QUAC_allele_cat[[5]]] > 2))
round(sum(QUAC_alleles_cap[QUAC_allele_cat[[5]]] > 3))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(ndrop in c(0,2)){
for(dup in 1:length(dup_reps)){
for(cat in 1:length(list_allele_cat)){
if(ndrop == 0) n_drop_file <- "_dr_0"
if(ndrop == 2) n_drop_file <- ""
##first calculate the frequency categories of alleles in the wild individuals
QUAC_allele_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, as.numeric(n_ind_p_pop), n_drop = ndrop, glob_only = TRUE)
##create a data frame with all of the alleles existing by category
QUAC_all_exist_df[dup, cat] <- round(sum(QUAC_alleles_cap[QUAC_allele_cat[[cat]]] > dup_reps[[dup]]))
##now determine how many wild alleles were captured per category
QUAC_wild_cap_df[dup, cat] <- round(sum(QUAC_alleles_cap[QUAC_allele_cat[[cat]]] > dup_reps[[dup]])/length(QUAC_allele_cat[[cat]]),4)
##code to store as one data frame
QUAC_allele_cap[dup, cat] <- paste0(signif((QUAC_wild_cap_df[dup,cat]*100),3), "% (", signif(QUAC_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(QUAC_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(QUAC_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(QUAC_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(QUAC_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(QUAC_allele_cap) <- list_allele_cat
##write out data frames
write.csv(QUAC_all_exist_df, paste0("QUAC_all_exist_df", n_drop_file, ".csv"))
write.csv(QUAC_wild_cap_df, paste0("QUAC_wild_cap_df", n_drop_file, ".csv"))
write.csv(QUAC_allele_cap, paste0("QUAC_all_cap_garden_df", n_drop_file, ".csv"))
}
##begin resampling code
QUAC_wild_genind<- QUAC_seppop[[2]]
QUAC_wild_genind
nrow(QUAC_wild_genind@tab)
n_total_indivs <- length(QUAC_wild_genind@tab[,1])
n_total_indivs
n_ind_p_pop<-table(QUAC_wild_genind@pop)
allele_freqs<-colSums(QUAC_wild_genind@tab)/(n_total_indivs*2)
allele_freqs
allele_cat <- get.allele.cat(QUAC_wild_genind, region_makeup=NULL, 2, n_ind_p_pop, n_drop=2, glob_only=T)
#create empty matrix
alleles_samp <- matrix(nrow=nrow(QUAC_wild_genind@tab)-1,ncol=length(allele_freqs))
alleles_samp
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(QUAC_wild_genind@tab)-1,ncol=length(allele_freqs))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(QUAC_wild_genind@tab)-1)){ ##minus one because our number of trees is 173, 172 individuals
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(QUAC_wild_genind@tab[sample(1:nrow(QUAC_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
##write in reps
num_reps<-100
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(QUAC_wild_genind@tab)-1,ncol=length(allele_freqs))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(QUAC_wild_genind@tab)-1)){ ##minus one because our number of trees is 173, 172 individuals
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(QUAC_wild_genind@tab[sample(1:nrow(QUAC_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
##write in reps
num_reps<-100
##begin resampling code
QUAC_wild_genind<- QUAC_seppop[[2]]
##now create summary array
summ_results_tree<-array(dim=c(nrow(QUAC_wild_genind@tab)-1, 11, num_reps)) ##why 11? 11 allele copies?
n_total_indivs <- length(QUAC_wild_genind@tab[,1])
n_ind_p_pop<-table(QUAC_wild_genind@pop)
allele_freqs <- colSums(QUAC_wild_genind@tab)/(n_total_indivs*2) ##times 2 because it is a diploid
allele_cat <- get.allele.cat(QUAC_wild_genind, region_makeup=NULL, 2, n_ind_p_pop, n_drop=2, glob_only=T)
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(QUAC_wild_genind@tab)-1,ncol=length(allele_freqs))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(QUAC_wild_genind@tab)-1)){ ##minus one because our number of trees is 173, 172 individuals
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(QUAC_wild_genind@tab[sample(1:nrow(QUAC_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
summ_results_tree
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean<-apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
all_mean
plot(all_mean[,7])
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(QUAC_wild_genind@tab)-1,ncol=length(allele_freqs))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(QUAC_wild_genind@tab)-1)){ ##minus one because our number of trees is 173, 172 individuals
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(QUAC_wild_genind@tab[sample(1:nrow(QUAC_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean<-apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
all_mean
head(all_mean)
plot(all_mean[,7])
plot(all_mean[,5])
plot(all_mean[,1])
abline(v = 95, col = "red")
plot(all_mean[,5])
abline(h = 95, col = "red")
abline(v = 100, col = "red")
plot(all_mean[,5])
plot(all_mean[,1])
plot(all_mean[,5])
lines(all_mean[,2])
lines(c(0:200),all_mean[,2])
length(all_mean[,2])
lines(c(0:length(all_mean[,2]),all_mean[,2])
)
plot(all_mean[,2])
colnames(all_means) <- list_allele_cat
colnames(all_mean) <- list_allele_cat
colnames(all_mean[,1:9]) <- list_allele_cat
list_allele_cat
ggplot(all_mean, aes(x)) +                    # basic graphical object
geom_line(aes(y= global), colour="red") +  # first layer
geom_line(aes(y= glob_v_com), colour="blue")
library(ggplto2)
library(ggplot2)
ggplot(all_mean, aes(x)) +                    # basic graphical object
geom_line(aes(y= global), colour="red") +  # first layer
geom_line(aes(y= glob_v_com), colour="blue")
all_mean <- as.data.frame(all_mean)
ggplot(all_mean, aes(x)) +                    # basic graphical object
geom_line(aes(y= global), colour="red") +  # first layer
geom_line(aes(y= glob_v_com), colour="blue")
ggplot(all_mean, aes(x)) +                    # basic graphical object
geom_line(aes(y = "global"), colour="red") +  # first layer
geom_line(aes(y = "glob_v_com"), colour="blue")
all_mean
all_mean <- as.data.frame(all_mean)
colnames(all_mean[,1:9]) <- list_allele_cat
all_mean
colnames(all_mean)
colnames(all_mean[,1:9] <- list_allele_cat
)
colnames(all_mean[,1:9]) <- list_allele_cat
head(all_mean)
all_mean[,1:9]
#mean across reps using apply
all_mean<-apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
all_mean <- as.data.frame(all_mean)
all_mean
colnames(all_mean)
all_mean <- all_mean[,1:9]
colnames(all_mean) <- list_allele_cat
View(all_mean)
all_mean <- all_mean[-1,]
ggplot(all_mean, aes(x)) +
geom_point(aes(y = global))
ggplot(all_mean, aes(c(0:171))) +
geom_point(aes(y = global))
length(all_mean[.1])
length(all_mean[,1])
length(0:169)
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global))
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red")
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red") + xlab("Number of Individuals") +
ylab("Percent diversity capture")
list_allele_cat
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red") +
geom_point(aes(y = glob_v_com), col = "firebrick") +
xlab("Number of Individuals") +
ylab("Percent diversity capture")
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red") +
geom_point(aes(y = glob_v_com), col = "firebrick") +
geom_point(aes(y = glob_com), col = "darkorange3")
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red") +
geom_point(aes(y = glob_v_com), col = "firebrick") +
geom_point(aes(y = glob_com), col = "darkorange3") +
geom_point(aes(y = glob_lowfr), col = "coral") +
xlab("Number of Individuals") +
ylab("Percent diversity capture")
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red") +
geom_point(aes(y = glob_v_com), col = "firebrick") +
geom_point(aes(y = glob_com), col = "darkorange3") +
geom_point(aes(y = glob_lowfr), col = "coral") +
geom_point(aes(y = glob_rare), col = "brown1") +
xlab("Number of Individuals") +
ylab("Percent diversity capture")
##write in reps
num_reps<-1000
##begin resampling code
QUAC_wild_genind<- QUAC_seppop[[2]]
##now create summary array
summ_results_tree<-array(dim=c(nrow(QUAC_wild_genind@tab)-1, 11, num_reps)) ##why 11? 11 allele copies?
n_total_indivs <- length(QUAC_wild_genind@tab[,1])
n_ind_p_pop<-table(QUAC_wild_genind@pop)
allele_freqs <- colSums(QUAC_wild_genind@tab)/(n_total_indivs*2) ##times 2 because it is a diploid
allele_cat <- get.allele.cat(QUAC_wild_genind, region_makeup=NULL, 2, n_ind_p_pop, n_drop=2, glob_only=T)
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(QUAC_wild_genind@tab)-1,ncol=length(allele_freqs))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(QUAC_wild_genind@tab)-1)){ ##minus one because our number of trees is 173, 172 individuals
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(QUAC_wild_genind@tab[sample(1:nrow(QUAC_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean<-apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
length(all_mean[,1])
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean<-apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(QUAC_wild_genind@tab)-1,ncol=length(allele_freqs))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(QUAC_wild_genind@tab)-1)){ ##minus one because our number of trees is 173, 172 individuals
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(QUAC_wild_genind@tab[sample(1:nrow(QUAC_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean<-apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
all_mean <- as.data.frame(all_mean)
all_mean <- all_mean[,1:9]
colnames(all_mean) <- list_allele_cat
all_mean <- all_mean[-1,]
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red") +
geom_point(aes(y = glob_v_com), col = "firebrick") +
geom_point(aes(y = glob_com), col = "darkorange3") +
geom_point(aes(y = glob_lowfr), col = "coral") +
geom_point(aes(y = glob_rare), col = "brown1") +
xlab("Number of Individuals") +
ylab("Percent diversity capture")
length(alleles_samp[,1])
alleles_samp
summ_results_tree
factor(all_mean)
ggplot(all_mean, aes(0:169)) +
geom_point(aes(y = global), col = "red") +
geom_point(aes(y = glob_v_com), col = "firebrick") +
geom_point(aes(y = glob_com), col = "darkorange3") +
geom_point(aes(y = glob_lowfr), col = "coral") +
geom_point(aes(y = glob_rare), col = "brown1") +
xlab("Number of Individuals") +
ylab("Percent diversity capture") +
theme_bw()
View(all_mean)
all_mean[,1]
rownames(all_mean[,1])
names(all_mean[,1])
seq(2:172)
length(all_mean[,1])
seq(2:171)
length(seq(2:171))
rownames(all_mean) <- paste0("Tree # ", seq(2:171))
View(all_mean)
all_mean_df <- melt(data = all_mean, id.vars = rownames(all_mean))
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
all_mean_df <- melt(data = all_mean, id.vars = rownames(all_mean))
plot(all_mean[,1])
plot(all_mean[,1], col = "red")
plot(all_mean[,1], col = "red", pch = 19)
points(all_mean[,2], col = "red", pch = 19)
points(all_mean[,2], col = "firebrick", pch = 19)
plot(all_mean[,1], col = "red", pch = 19, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100))
points(all_mean[,2], col = "firebrick", pch = 19)
points(all_mean[,3], col = "darkorange3", pch = 19)
plot(all_mean[,1], col = "red", pch = 19, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100))
points(all_mean[,2], col = "firebrick", pch = 20)
points(all_mean[,3], col = "darkorange3", pch = 20)
points(all_mean[,4], col = "coral", pch = 20)
plot(all_mean[,1], col = "red", pch = 19, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100))
points(all_mean[,2], col = "firebrick", pch = 20)
points(all_mean[,3], col = "darkorange3", pch = 20)
points(all_mean[,4], col = "coral", pch = 18)
points(all_mean[,5], col = "brown1", pch = 18)
plot(all_mean[,1], col = "red", pch = 19, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100), cex = 0.8)
plot(all_mean[,1], col = "red", pch = 19, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100), cex = 0.8)
plot(all_mean[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100), cex = 0.8)
points(all_mean[,2], col = "firebrick", pch = 20, cex = 0.8)
points(all_mean[,3], col = "darkorange3", pch = 20, 0.8)
points(all_mean[,3], col = "darkorange3", pch = 20, cex = 0.8)
points(all_mean[,4], col = "coral", pch = 19, cex = 0.8)
points(all_mean[,5], col = "brown1", pch = 19, cex = 0.8)
plot(all_mean[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100), cex = 0.8)
points(all_mean[,2], col = "firebrick", pch = 20, cex = 0.8)
points(all_mean[,3], col = "darkorange3", pch = 20, cex = 0.8)
points(all_mean[,4], col = "coral", pch = 20, cex = 0.8)
points(all_mean[,5], col = "brown1", pch = 20, cex = 0.8)
list_allele_cat
legend('bottomright', legend = c("Global Alleles", "Globally Very Common",
"Globally Common", "Global Low Frequency",
"Globally Rare"), pch = 20, cex = 0.8,
col = c("red", "firebrick", "darkorange3", "coral", "brown1"))
legend('bottomright', legend = c("Global Alleles", "Globally Very Common",
"Globally Common", "Global Low Frequency",
"Globally Rare"), pch = 20, cex = 1.5,
col = c("red", "firebrick", "darkorange3", "coral", "brown1"))
legend('bottomright', legend = c("Global Alleles", "Globally Very Common",
"Globally Common", "Global Low Frequency",
"Globally Rare"), pch = 20,
col = c("red", "firebrick", "darkorange3", "coral", "brown1"))
plot(all_mean[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100), cex = 0.8)
points(all_mean[,2], col = "firebrick", pch = 20, cex = 0.8)
points(all_mean[,3], col = "darkorange3", pch = 20, cex = 0.8)
points(all_mean[,4], col = "coral", pch = 20, cex = 0.8)
points(all_mean[,5], col = "brown1", pch = 20, cex = 0.8)
legend('bottomright', legend = c("Global Alleles", "Globally Very Common",
"Globally Common", "Global Low Frequency",
"Globally Rare"), pch = 20,
col = c("red", "firebrick", "darkorange3", "coral", "brown1"))
legend('bottomright', legend = c("Global Alleles", "Globally Very Common",
"Globally Common", "Global Low Frequency",
"Globally Rare"), pch = 20,
col = c("red", "firebrick", "darkorange3", "coral", "brown1"), pt.cex = 2)
points(all_mean[,5], col = "deeppink4", pch = 20, cex = 0.8)
legend('bottomright', legend = c("Global Alleles", "Globally Very Common",
"Globally Common", "Global Low Frequency",
"Globally Rare"), pch = 20,
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pt.cex = 2)
pdf("all_resampling.pdf")
plot(all_mean[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100), cex = 1.2)
points(all_mean[,2], col = "firebrick", pch = 20, cex = 1.2)
points(all_mean[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(all_mean[,4], col = "coral", pch = 20, cex = 1.2)
points(all_mean[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global Alleles", "Globally Very Common",
"Globally Common", "Global Low Frequency",
"Globally Rare"), pch = 20,
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pt.cex = 2)
dev.off()
pdf("all_resampling.pdf")
plot(all_mean[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", ylim = c(0,100), cex = 1.2)
points(all_mean[,2], col = "firebrick", pch = 20, cex = 1.2)
points(all_mean[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(all_mean[,4], col = "coral", pch = 20, cex = 1.2)
points(all_mean[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global Alleles", "Globally Very Common Alleles",
"Globally Common", "Global Low Frequency Alleles",
"Globally Rare Alleles"), pch = 20,
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pt.cex = 2)
dev.off()
plot(all_mean[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,171), ylim = c(0,100), cex = 1.2)
points(all_mean[,2], col = "firebrick", pch = 20, cex = 1.2)
points(all_mean[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(all_mean[,4], col = "coral", pch = 20, cex = 1.2)
points(all_mean[,5], col = "deeppink4", pch = 20, cex = 1.2)
pdf("all_resampling.pdf")
plot(all_mean[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,171), ylim = c(0,100), cex = 1.2)
points(all_mean[,2], col = "firebrick", pch = 20, cex = 1.2)
points(all_mean[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(all_mean[,4], col = "coral", pch = 20, cex = 1.2)
points(all_mean[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global Alleles", "Globally Very Common Alleles",
"Globally Common", "Global Low Frequency Alleles",
"Globally Rare Alleles"), pch = 20,
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pt.cex = 2)
dev.off()
abline(h = 95)
abline(h = 95, v = 100)
449 - 189
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
##############################################
############# Convert to Genind ##############
##############################################
##set working directory to load in data files
setwd("../../QUAC_data_files")

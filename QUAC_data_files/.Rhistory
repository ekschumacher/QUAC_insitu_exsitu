library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
##############################################
############# Convert to Genind ##############
##############################################
##set working directory to load in data files
setwd("../../QUAC_data_files")
##now read in genepop file as a genind for adegenet
QUAC_garden_wild_gen <- read.genepop("QUAC_adegenet_files/QUAC_rawscores_garden_wild.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_rel_df <- read.csv("QUAC_data_frames/QUAC_rawscores_garden_wild.csv")
##rename individuals in the genind object
rownames(QUAC_garden_wild_gen@tab) <- QUAC_rel_df$ID
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_rel_df$POP)
levels(QUAC_garden_wild_gen@pop) <- QUAC_popnames
#######################################################################
############# Clone check, relatedness, and missing data ##############
#######################################################################
####run clone check
##convert to genelcone object
QUAC_geneclone <- as.genclone(QUAC_garden_wild_gen)
##identify multi-locus genotypes (non-clones)
QUAC_gen_id <- mlg.id(QUAC_geneclone)
##function to pull out all clones into a list
QUAC_clone_index <- which(sapply(QUAC_gen_id,function(x) length(x)>1))
##now remove clones from the matrix
QUAC_noclones <- clonecorrect(QUAC_geneclone)
##convert back to a genind object
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals, there were 7 clones
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE) ##there were 7 individuals with too much missing data, left with 449 individuals
QUAC_gen_id
length(QUAC_gen_id) > 2
QUAC_gen_id$1
QUAC_gen_id[1]
QUAC_gen_id[2]
QUAC_gen_id[3]
QUAC_gen_id[[1]]
QUAC_gen_id[[1]] > TRUE
rm(clones_list)
clone_id <- list()
clone_id <- list()
##loop to id which are clones
for(clones in 1:length(QUAC_gen_id)){
clones_list <- QUAC_gen_id[[clones]] > 1
if(clones_list == TRUE) {
clone_id[[clones]] <- which(QUAC_gen_id[[clones]])
}
}
which(sapply(QUAC_gen_id,function(1), length(1)>1))
which(sapply(QUAC_gen_id, function(1), length(1)>1))
which(sapply(QUAC_gen_id, function(x) length(x)>1))
QUAC_gen_id[[65]]
QUAC_clone_index
##create a list of ID with clones
for(clones in QUAC_clone_index) clones_ID[[clones]] <- QUAC_gen_id[[QUAC_clone_index]]
##create a list of ID with clones
for(clones in QUAC_clone_index) clones_ID <- QUAC_gen_id[[QUAC_clone_index]]
QUAC_gen_id[[65]]
function(QUAC_gen_id[[x]], QUAC_clone_index)
QUAC_clone_index[[1]]
##create a list of ID with clones
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[clones]]
##create a list of ID with clones
clones_ID <- list()
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[clones]]
for(clones in QUAC_clone_index) clones_ID[[clones]] <- QUAC_gen_id[[clones]]
clones_ID
QUAC_clone_index[[1]]
1:length(QUAC_clone_index)
clones in QUAC_clone_index
for(clones in QUAC_clone_index)
)
##create a list of ID with clones
clones_ID <- list()
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[QUAC_clone_index[[clones]]]]
clones_ID
###################################
###### Relatedness Analysis #######
###################################
##run relatedness analysis on the cleaned score data frame
QUAC_relatedness_df <- Demerelate(QUAC_nomd_nocl_rel_df, object = T, value = "loiselle")
##output to genalex file if needed
#genind2genalex(QUAC_genind_nomd, file="QUAC_data_frames/QUAC_allpop_clean_genalex.csv",
#              overwrite = TRUE)
##open genalex and convert to arp file to load new genepop into R
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_nomd_nocl_rel_df <- QUAC_rel_df[QUAC_rel_df$ID %in% rownames(QUAC_genind_nomd@tab),]
###################################
###### Relatedness Analysis #######
###################################
##run relatedness analysis on the cleaned score data frame
QUAC_relatedness_df <- Demerelate(QUAC_nomd_nocl_rel_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_halfsib_names <- names(which(unlist(QUAC_relatedness_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
QUAC_halfsib_names_cleanfront <- gsub("^.*\\.","", QUAC_halfsib_names)
QUAC_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_halfsib_names_cleanfront)
QUAC_relate_ind_remove <- unique(QUAC_halfsib_names_cleanback) ##260 of these individuals have > 25% relatedness
QUAC_relate_ind_remove
sort(QUAC_relate_ind_remove)
QUAC_genind_nomd
QUAC_wild_df <- read.csv("QUAC_data_frames/Garden_Wild/QUAC_wild_clean_df.csv")
View(QUAC_wild_df)
View(QUAC_relatedness_df)
View(QUAC_nomd_nocl_rel_df)
##remove coords
QUAC_wild_df <- QUAC_wild_df[,-c(3:4)]
#########################################
############# Run Relatedness ###########
#########################################
##run relatedness analysis on the cleaned score data frame
QUAC_wild_relatedness_df <- Demerelate(QUAC_wild_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_wild_halfsib_names <- names(which(unlist(QUAC_wild_relatedness_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
QUAC_wild_halfsib_names_cleanfront <- gsub("^.*\\.","", QUAC_wild_halfsib_names)
QUAC_wild_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_wild_halfsib_names_cleanfront)
QUAC_wild_relate_ind_remove <- unique(QUAC_wild_halfsib_names_cleanback)
length(QUAC_wild_relate_ind_remove)
172 - 59
View(QUAC_nomd_nocl_rel_df)
###################################
###### Relatedness Analysis #######
###################################
###########Run relatedness analysis on wild and garden individuals separately
###first separate data frames
QUAC_garden_rel_df <- QUAC_nomd_nocl_rel_df[QUAC_nomd_nocl_rel_df$POP == "Garden",]
QUAC_wild_rel_df <- QUAC_nomd_nocl_rel_df[QUAC_nomd_nocl_rel_df$POP == "Wild",]
#########wild relatedness
##run relatedness analysis on the cleaned score data frame
QUAC_wild_relatedness_df <- Demerelate(QUAC_wild_rel_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_wild_halfsib_names <- names(which(unlist(QUAC_wild_relatedness_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
QUAC_wild_halfsib_names_cleanfront <- gsub("^.*\\.","", QUAC_wild_halfsib_names)
QUAC_wild_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_wild_halfsib_names_cleanfront)
QUAC_wild_relate_ind_remove <- unique(QUAC_wild_halfsib_names_cleanback)
sort(QUAC_wild_relate_ind_remove)
length(QUAC_wild_relate_ind_remove)
View(QUAC_wild_rel_df)
172 - 62
##write out data frame
write.csv(QUAC_nomd_nocl_rel_df, "QUAC_data_frames/Garden_Wild/QUAC_garden_wild_clean_df.csv")
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
##############################################
############# Convert to Genind ##############
##############################################
##set working directory to load in data files
setwd("../../QUAC_data_files")
##now read in genepop file as a genind for adegenet
QUAC_garden_wild_gen <- read.genepop("QUAC_adegenet_files/QUAC_rawscores_garden_wild.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_rel_df <- read.csv("QUAC_data_frames/QUAC_rawscores_garden_wild.csv")
##rename individuals in the genind object
rownames(QUAC_garden_wild_gen@tab) <- QUAC_rel_df$ID
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_rel_df$POP)
levels(QUAC_garden_wild_gen@pop) <- QUAC_popnames
#######################################################################
############# Clone check, relatedness, and missing data ##############
#######################################################################
####run clone check
##convert to genelcone object
QUAC_geneclone <- as.genclone(QUAC_garden_wild_gen)
##identify multi-locus genotypes (non-clones)
QUAC_gen_id <- mlg.id(QUAC_geneclone)
##function to pull out all clones into a list
QUAC_clone_index <- which(sapply(QUAC_gen_id, function(x) length(x)>1))
##create a list of ID with clones
clones_ID <- list()
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[QUAC_clone_index[[clones]]]]
##now remove clones from the matrix
QUAC_noclones <- clonecorrect(QUAC_geneclone)
##convert back to a genind object
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals, there were 7 clones
##run relatedness analysis on the cleaned score data frame
QUAC_relatedness_df <- Demerelate(QUAC_nomd_nocl_rel_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_halfsib_names <- names(which(unlist(QUAC_relatedness_df$Empirical_Relatedness) > 0.25))
QUAC_noclones
strata(QUAC_geneclone) <- levels(QUAC_garden_wild_gen@pop)
strata(QUAC_geneclone)
QUAC_geneclone
clones_ID
##convert back to a genind object
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals, there were 7 clones
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE) ##there were 7 individuals with too much missing data, left with 449 individuals
QUAC_genind_nomd
##output to genalex file if needed
genind2genalex(QUAC_genind_nomd, file="QUAC_data_frames/QUAC_garden_wild_clean_genalex.csv",
overwrite = TRUE)
##open genalex and convert to arp file to load new genepop into R
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_nomd_nocl_rel_df <- QUAC_rel_df[QUAC_rel_df$ID %in% rownames(QUAC_genind_nomd@tab),]
##write out data frame
write.csv(QUAC_nomd_nocl_rel_df, "QUAC_data_frames/Garden_Wild/QUAC_garden_wild_clean_df.csv")
###################################
###### Relatedness Analysis #######
###################################
###########Run relatedness analysis on wild and garden individuals separately
###first separate data frames
QUAC_garden_rel_df <- QUAC_nomd_nocl_rel_df[QUAC_nomd_nocl_rel_df$POP == "Garden",]
QUAC_wild_rel_df <- QUAC_nomd_nocl_rel_df[QUAC_nomd_nocl_rel_df$POP == "Wild",]
##write out data frames
write.csv(QUAC_garden_rel_df, "Garden_Wild/QUAC_garden_clean_df.csv")
write.csv(QUAC_wild_rel_df, "Garden_Wild/QUAC_wild_clean_df.csv")
###################################
###### Relatedness Analysis #######
###################################
###########Run relatedness analysis on wild and garden individuals separately
###first separate data frames
QUAC_garden_rel_df <- QUAC_nomd_nocl_rel_df[QUAC_nomd_nocl_rel_df$POP == "Garden",]
QUAC_wild_rel_df <- QUAC_nomd_nocl_rel_df[QUAC_nomd_nocl_rel_df$POP == "Wild",]
##write out data frames
write.csv(QUAC_garden_rel_df, "Garden_Wild/QUAC_garden_clean_df.csv")
##write out data frames
write.csv(QUAC_garden_rel_df, "QUAC_data_frames/Garden_Wild/QUAC_garden_clean_df.csv")
write.csv(QUAC_wild_rel_df, "QUAC_data_frames/Garden_Wild/QUAC_wild_clean_df.csv")
#########wild relatedness
##run relatedness analysis on the cleaned score data frame
QUAC_wild_relatedness_df <- Demerelate(QUAC_wild_rel_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_wild_halfsib_names <- names(which(unlist(QUAC_wild_relatedness_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
QUAC_wild_halfsib_names_cleanfront <- gsub("^.*\\.","", QUAC_wild_halfsib_names)
QUAC_wild_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_wild_halfsib_names_cleanfront)
QUAC_wild_relate_ind_remove <- unique(QUAC_wild_halfsib_names_cleanback)
##now limit genind object by these names
QUAC_relate_red_gen <- QUAC_genind_nomd[!rownames(QUAC_genind_nomd@tab) %in% QUAC_relate_ind_remove,]
##now limit genind object by these names
QUAC_relate_red_gen <- QUAC_genind_nomd[!rownames(QUAC_genind_nomd@tab) %in% QUAC_wild_relate_ind_remove,]
QUAC_relate_red_gen
QUAC_wild_relate_ind_remove
length(QUAC_wild_relate_ind_remove)
seppop(QUAC_garden_wild_gen)
seppop(QUAC_garden_wild_gen)$Wild
##now limit genind
#first, create wild only genind
QUAC_wild_gen <- seppop(QUAC_garden_wild_gen)$Wild
seppop(QUAC_genind_nomd)$Wild
##now limit genind
#first, create wild only genind
QUAC_wild_nomd_nocl_gen <- seppop(QUAC_genind_nomd)$Wild
#now limit by the highly related individuals
QUAC_wild_relate_red_gen <- QUAC_wild_nomd_nocl_gen[!rownames(QUAC_wild_nomd_nocl_gen@tab) %in% QUAC_wild_relate_ind_remove,]
QUAC_wild_relate_red_gen
##export genind object as a genalex file
genind2genalex(QUAC_relate_red_gen, file="QUAC_data_frames/Relate_Red/QUAC_relate_red_wild_genalex.csv",
overwrite = TRUE)
##export genind object as a genalex file
genind2genalex(QUAC_wild_relate_red_gen, file="QUAC_data_frames/Relate_Red/QUAC_relate_red_wild_genalex.csv",
overwrite = TRUE)
##load in genepop file with all populations for all individuals
QUAC_allpop_gen <- read.genepop("QUAC_adegenet_files/Garden_Wild/QUAC_allpop_clean.gen", ncode = 3)
##load in in data file for all pops, cleaned
QUAC_allpop_clean_df <- read.csv("QUAC_data_frames/QUAC_allpop_clean.csv")
###load in all population files
##load in genepop file with all populations for all individuals
QUAC_allpop_clean_gen <- read.genepop("QUAC_adegenet_files/Garden_Wild/QUAC_allpop_clean.gen", ncode = 3)
##load in in data file for all pops, cleaned
QUAC_allpop_clean_df <- read.csv("QUAC_data_frames/QUAC_allpop_clean.csv")
#name individuals
rownames(QUAC_allpop_clean_gen@tab) <- QUAC_allpop_clean_df$Ind
levels(QUAC_allpop_clean_gen@pop) <- QUAC_allpop_names
#populations
QUAC_allpop_names <- unique(QUAC_allpop_clean_df$Pop)
levels(QUAC_allpop_clean_gen@pop) <- QUAC_allpop_names
#####prep all wild pop file for structure
##reduce genind
QUAC_wild_relate_red_allpop_gen <- QUAC_allpop_clean_gen[!rownames(QUAC_allpop_clean_gen@tab) %in% QUAC_wild_relate_ind_remove,]
QUAC_wild_relate_red_allpop_gen
QUAC_allpop_clean_gen@pop
seppop(QUAC_allpop_clean_gen@pop)[18:22]
rownames(QUAC_wild_nomd_nocl_gen@tab)
#####prep all wild pop file for structure
##reduce genind object for only wild populations
QUAC_wild_allpop_clean_gen <- QUAC_allpop_clean_gen[rownames(QUAC_allpop_clean_gen@tab) %in% rownames(QUAC_wild_nomd_nocl_gen@tab),]
QUAC_wild_allpop_clean_gen
levels(QUAC_wild_allpop_clean_gen@pop)
##reduce genind
QUAC_wild_relate_red_allpop_gen <- QUAC_wild_allpop_clean_gen[!rownames(QUAC_wild_allpop_clean_gen@tab) %in% QUAC_wild_relate_ind_remove,]
QUAC_wild_relate_red_allpop_gen
##export genind object as a genalex file
genind2genalex(QUAC_wild_relate_red_allpop_gen, file="QUAC_data_frames/Relate_Red/QUAC_wild_relate_red_allpop_genalex.csv",
overwrite = TRUE)
install.packages("conStruct")
library(conStruct)
########limiting garden individuals by relatedness
QUAC_garden_relatedness_df <- Demerelate(QUAC_garden_rel_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_garden_halfsib_names <- names(which(unlist(QUAC_garden_relatedness_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
QUAC_garden_halfsib_names_cleanfront <- gsub("^.*\\.","", QUAC_garden_halfsib_names)
QUAC_garden_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_garden_halfsib_names_cleanfront)
QUAC_garden_relate_ind_remove <- unique(QUAC_garden_halfsib_names_cleanback)
length(QUAC_garden_relate_ind_remove)
277-199
QUAC_garden_relate_ind_remove
sort(QUAC_garden_relate_ind_remove)
##now limit genind
#first, create wild only genind
QUAC_garden_nomd_nocl_gen <- seppop(QUAC_genind_nomd)$Garden
rownames(QUAC_garden_nomd_nocl_gen@tab)
##reduce genind object for only garden populations
QUAC_garden_allpop_clean_gen <- QUAC_allpop_clean_gen[rownames(QUAC_allpop_clean_gen@tab) %in% rownames(QUAC_garden_nomd_nocl_gen@tab),]
QUAC_garden_allpop_clean_gen
levels(QUAC_garden_allpop_clean_gen@pop)
##now reduce by relatedness
QUAC_garden_relate_red_allpop_gen <- QUAC_garden_allpop_clean_gen[!rownames(QUAC_garden_allpop_clean_gen@tab) %in% QUAC_garden_relate_ind_remove,]
QUAC_garden_relate_red_allpop_gen
##export to genalex file
genind2genalex(QUAC_garden_relate_red_allpop_gen, file="QUAC_data_frames/Relate_Red/QUAC_garden_relate_red_allpop_genalex.csv",
overwrite = TRUE)

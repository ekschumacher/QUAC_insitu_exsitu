(38000/52)/37.5
((38000/52)/37.5)*1.24
(((38000/52)/37.5)*1.24)*4
library(hierfstat)
hierfstat
?hierfstat
setwd("C:\\Users\\eschumacher\\Documents")
nanodrop_values <- read.csv("nandrop_shz_17_60.csv")
setwd("C:\\Users\\eschumacher\\Documents")
setwd("C:/Users/eschumacher/Documents")
setwd("C:\\Users\\eschumacher\\Documents\\primer_ordering_ZAIN")
setwd("C:\\Users\\eschumacher\\Documents")
read.csv("nanodrop_shz_17_60.csv")
nanodrop_values <- read.csv("nanodrop_shz_17_60.csv")
##set my working directory to my documents folder
setwd("C:\\Users\\eschumacher\\Documents")
##
nanodrop_values <- read.csv("nanodrop_shz_17_60.csv")
?t.test
t.test(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, paired = TRUE)
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop)
##now we run the t-test
t.test(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, paired = TRUE)
##
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop)
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop)
dev.off()
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10))
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"))
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"))
dev.off()
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), title = "260/230 ratio comparisons before and after new blank")
dev.off()
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), ylab = c("260/230 Ratios"),
main = c("260/230 ratios before and after new blank"))
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), ylab = c("260/230 Ratios"),
main = c("260/230 ratios before and after new blank"))
dev.off()
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), ylab = c("260/230 Ratios"),
main = c("260/230 ratios before and after new blank"))
dev.off()
##set my working directory to my documents folder
setwd("C:\\Users\\eschumacher\\Documents")
##load in nanodrop values
nanodrop_values <- read.csv("nanodrop_shz_17_60.csv")
##non-parametrc
wilcox.test(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, paired = TRUE, alternative = "two.sided")
sum(134
83.8
48.2
21.2)
sum(134, 83.8, 48.2, 21.2)
library(adegenet)
library(poppr)
library(hierfstat)
library(PopGenReport)
library(pegas)
?pair.ia
library(adegenet)
##
QUAC_div <- read.genepop("C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_diversity\\QUAC_data_files\\QUAC_genind\\garden_wild\\QUAC_garden_clean.gen", ncode = 3)
QUAC_div
QUAC_div@tab
QUAC_div@loc.fac
QUAC_div
QUAC_div@loc.n.all
summary(QUAC_div)
library(hierfstat)
allelic.richness(QUAC_div)
sum(as.numeric(QUAC_div@loc.n.all))
as.numeric(QUAC_div@loc.n.all)[1]
21/175
length(QUAC_div@loc.n.all)
allelic.richness(QUAC_div)
colMeans(allelic.richness(QUAC_div)$Ar)
##################################
#### Set working directory #######
##################################
##setting your working directory
ZAIN_wd <- "G:\\Shared drives\\Emily_Schumacher\\ZAIN"
##convert to a genind file
arp2gen(paste0(ZAIN_wd, "Data_Files\\ZAIN_garden_wild\\ZAIN_garden_wild.arp"))
###################################
########## Libraries ##############
###################################
##load in packages
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
##convert to a genind file
arp2gen(paste0(ZAIN_wd, "Data_Files\\ZAIN_garden_wild\\ZAIN_garden_wild.arp"))
##convert to a genind file
arp2gen(paste0(ZAIN_wd, "\\Data_Files\\ZAIN_garden_wild\\ZAIN_garden_wild.arp"))
##ZAIN score df
ZAIN_garden_wild_df <- read.csv(paste0(ZAIN_wd, "\\Data_Files\\ZAIN_garden_wild\\ZAIN_garden_wild_df.csv"))
##set working directory
setwd(ZAIN_wd)
##load in genind
ZAIN_garden_wild_gen <- read.genepop("\\Data_Files\\ZAIN_garden_wild\\ZAIN_garden.gen", ncode = 3)
##load in genind
ZAIN_garden_wild_gen <- read.genepop("\\Data_Files\\ZAIN_garden_wild\\ZAIN_garden_wild.gen", ncode = 3)
##load in genind
ZAIN_garden_wild_gen <- read.genepop("Data_Files\\ZAIN_garden_wild\\ZAIN_garden_wild.gen", ncode = 3)
View(ZAIN_garden_wild_gen)
View(ZAIN_garden_wild_df)
##organize genind file
levels(ZAIN_garden_wild_gen@pop) <- unique(ZAIN_garden_wild_df$Pop)
##name the individuals in the genind
rownames(ZAIN_garden_wild_gen@tab) <- ZAIN_garden_wild_df$Sample.Name
length(rownames(ZAIN_garden_wild_gen@tab))
##ZAIN score df
ZAIN_garden_wild_df <- read.csv(paste0(ZAIN_wd, "\\Data_Files\\ZAIN_garden_wild\\ZAIN_garden_wild_df.csv"))
##organize genind file
levels(ZAIN_garden_wild_gen@pop) <- unique(ZAIN_garden_wild_df$Pop)
##name the individuals in the genind
rownames(ZAIN_garden_wild_gen@tab) <- ZAIN_garden_wild_df$Sample.Name
#########################################################
##### Remove clones, missing data, and siblings #########
#########################################################
##remove individuals with too much missing data
ZAIN_garden_wild_gen <- missingno(ZAIN_garden_wild_gen, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
#First put into poppr format
ZAIN_garden_clones <- as.genclone(ZAIN_garden_wild_gen)
##Create a list of clones from the ZAIN inds
ZAIN_clones <- as.genclone(ZAIN_garden_wild_gen)
strata(ZAIN_clones) <- other(ZAIN_clones)$population_hierarchy[-1]
##Create a list of clones from the ZAIN inds
ZAIN_clones <- as.genclone(ZAIN_garden_wild_gen)
ZAIN_clones
##create a clone list
ZAIN_clone_list<-mlg.id(ZAIN_clones)
ZAIN_clone_list
length(ZAIN_clone_list)
##create MLG list
ZAIN_mlg_list <- mlg.id(ZAIN_clones)
#Function to pull out individual indices where clone length greater than 1
ZAIN_clone_index <- which(sapply(ZAIN_mlg_list, function(x) length(x)>1))
ZAIN_clone_index
ZAIN_clones
##Create a list of clones from the ZAIN inds
ZAIN_clones <- as.genclone(ZAIN_garden_wild_gen)
##setting the population levels for the genind
#strata(ZAIN_clones) <- other(ZAIN_clones)$population_hierarchy[-1]
##create MLG list
ZAIN_mlg_list <- mlg.id(ZAIN_clones)
#Function to pull out individual indices where clone length greater than 1
ZAIN_clone_index <- which(sapply(ZAIN_mlg_list, function(x) length(x)>1))
ZAIN_clone_index
length(ZAIN_mlg_list)
write.csv(ZAIN_mlg_list[ZAIN_clone_index],file = "C:\\Users\\eschumacher\\Documents\\GitHub\\ZAIN_insitu_exsitu\\Data_Files\\ZAIN_data_frames\\ZAIN_clone_list.csv")
#This removes clones and then saves as new file for Genealex if desired
ZAIN_nocl <- clonecorrect(ZAIN_garden_wild_gen)
genind2genalex(genclone2genind(popr_nocl),file="C:\\Users\\eschumacher\\Documents\\GitHub\\ZAIN_insitu_exsitu\\Data_Files\\ZAIN_geninds\\ZAIN_garden_wild_nocl.csv")
genind2genalex(genclone2genind(ZAIN_nocl),file="C:\\Users\\eschumacher\\Documents\\GitHub\\ZAIN_insitu_exsitu\\Data_Files\\ZAIN_geninds\\ZAIN_garden_wild_nocl.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
ZAIN_garden_wild_nocl_gen <-genclone2genind(popr_nocl)
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
ZAIN_garden_wild_nocl_gen <-genclone2genind(ZAIN_nocl)
ZAIN_garden_wild_nocl_gen
#This removes clones and then saves as new file for Genlex if desired
ZAIN_nocl <- clonecorrect(ZAIN_garden_wild_gen, strata = ~Pop)
?clonecorrect
##Create a list of clones from the ZAIN inds
ZAIN_clones <- as.genclone(ZAIN_garden_wild_gen)
##setting the population levels for the genind
strata(ZAIN_clones) <- other(ZAIN_clones)$population_hierarchy[-1]
##create MLG list
ZAIN_mlg_list <- mlg.id(ZAIN_clones)
#Function to pull out individual indices where clone length greater than 1
ZAIN_clone_index <- which(sapply(ZAIN_mlg_list, function(x) length(x)>1))
write.csv(ZAIN_mlg_list[ZAIN_clone_index],file = "C:\\Users\\eschumacher\\Documents\\GitHub\\ZAIN_insitu_exsitu\\Data_Files\\ZAIN_data_frames\\ZAIN_clone_list.csv")
#This removes clones and then saves as new file for Genlex if desired
ZAIN_nocl <- clonecorrect(ZAIN_garden_wild_gen, strata = ~Pop)
#This removes clones and then saves as new file for Genlex if desired
ZAIN_nocl <- clonecorrect(ZAIN_garden_wild_gen, strata=~Pop))
#This removes clones and then saves as new file for Genlex if desired
ZAIN_nocl <- clonecorrect(ZAIN_garden_wild_gen, strata=~Pop)
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
ZAIN_garden_wild_nocl_gen <-genclone2genind(ZAIN_nocl)
ZAIN_garden_wild_nocl_gen
ZAIN_mlg_list
ZAIN_nocl
###################################################
############ Relatedness Reduction ################
###################################################
###reduce relatedness
ZAIN_reorg_relate_df <- Demerelate(ZAIN_garden_wild_df, object = T, value = "loiselle")
library(Demerelate)
###################################################
############ Relatedness Reduction ################
###################################################
###reduce relatedness
ZAIN_reorg_relate_df <- Demerelate(ZAIN_garden_wild_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
ZAIN_halfsib_names <- names(which(unlist(ZAIN_reorg_relate_df$Empirical_Relatedness) > 0.25))
###################################################
############ Relatedness Reduction ################
###################################################
###reduce relatedness
ZAIN_reorg_relate_df <- Demerelate(ZAIN_garden_wild_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
ZAIN_halfsib_names <- names(which(unlist(ZAIN_reorg_relate_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
ZAIN_halfsib_names_cleanfront <- gsub("^.*\\.","", ZAIN_halfsib_names)
ZAIN_halfsib_names_cleanback <- gsub("^.*\\_","", ZAIN_halfsib_names_cleanfront)
ZAIN_relate_ind_remove <- unique(ZAIN_halfsib_names_cleanback)
ZAIN_relate_ind_remove
length(ZAIN_relate_ind_remove)
###################################################
############ Relatedness Reduction ################
###################################################
###reduce relatedness
ZAIN_reorg_relate_df <- Demerelate(ZAIN_garden_wild_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
ZAIN_halfsib_names <- names(which(unlist(ZAIN_reorg_relate_df$Empirical_Relatedness) > 0.25))
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
#####################################
############ Directories ############
#####################################
QUAC_data_files <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_data_files"
QUAC_analysis_results <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_analyses\\Results"
################################
########## Load files ##########
################################
setwd(QUAC_data_files)
##load in genind for QUAC
QUAC_garden_wild_gen <- read.genepop(paste0(QUAC_data_files, "\\QUAC_genind\\QUAC_garden_wild_clean.gen"), ncode = 3)
##load in data frame
QUAC_garden_wild_df <- read.csv(paste0(QUAC_data_files, "\\QUAC_data_frames\\QUAC_garden_wild_clean_df.csv"))
##rename individuals in the genind file
rownames(QUAC_garden_wild_gen@tab) <- QUAC_garden_wild_df$Ind
##rename population names
QUAC_popnames <- unique(QUAC_garden_wild_df$Pop)
levels(QUAC_garden_wild_gen@pop) <- QUAC_popnames
##load in get allele category function
source("C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_analyses\\RScripts\\Fa_sample_funcs.R")
##load in functions
colMax <- function(data) sapply(data, max, na.rm = TRUE)
sample.pop<-function(genind_obj,vect_pop_ID,vect_samp_sizes){
p<-length(vect_pop_ID)
if (p>1) {
for (p in 1:length(vect_pop_ID))
alleles[p,]<-colSums(genind_obj[[vect_pop_ID[p]]]@tab[sample(1:nrow(genind_obj[[vect_pop_ID[p]]]@tab), vect_samp_sizes[p]),],na.rm=T)
alleles<-colSums(alleles)
} else {alleles<-colSums(genind_obj[[vect_pop_ID[p]]]@tab[sample(1:nrow(genind_obj[[vect_pop_ID[p]]]@tab), vect_samp_sizes[p]),],na.rm=T)}
alleles
}
############################################################
############ Comparing wild and garden populations #########
############################################################
##calculate genetic diversity statistics
QUAC_wild_hexp <- summary(seppop(QUAC_garden_wild_gen)$Wild)[7]
QUAC_garden_hexp <- summary(seppop(QUAC_garden_wild_gen)$Garden)[7]
##calculate allelic richness
QUAC_garden_allrich <- allelic.richness(seppop(QUAC_garden_wild_gen)$Wild)$Ar
QUAC_garden_allrich <- allelic.richness(seppop(QUAC_garden_wild_gen)$Garden)$Ar
##create gendiv data frame
QUAC_gendiv_df <- matrix(nrow = 30, ncol = 3)
QUAC_gendiv_df[1:15,1] <- c("Garden")
QUAC_gendiv_df[16:30,1] <- c("Wild")
##load in heterozygosity
QUAC_gendiv_df[1:15,2] <- QUAC_garden_hexp$Hexp
QUAC_gendiv_df[16:30,2] <- QUAC_wild_hexp$Hexp
##load in allelic richness
QUAC_gendiv_df[1:15,3] <- QUAC_wild_allrich[,1]
QUAC_gendiv_df[16:30,3] <- QUAC_garden_allrich[,1]
#####test for normality and homogeneity of variance --hexp
##test homogeneity of variances
var.test(as.numeric(QUAC_gendiv_df[,2])~as.factor(QUAC_gendiv_df[,1]))
####################################
#### Allelic capture code ##########
####################################
##list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
##create matrices to store results
QUAC_all_exist <- matrix(nrow = 1, ncol = 9)
QUAC_wild_capt <- matrix(nrow = 1, ncol = 10)
##seppop genind
QUAC_seppop <- seppop(QUAC_garden_wild_gen)
##calculate number of individuals per pop
n_ind_p_pop <- table(QUAC_garden_wild_gen@pop)
##convert to genpop
QUAC_garden_wild_genpop <- genind2genpop(QUAC_garden_wild_gen)
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
QUAC_allele_cat <- get.allele.cat(QUAC_garden_wild_genpop, c(1:2), 2, n_ind_p_pop)
##create alleles captured by gardens
n_ind_W<-table(QUAC_garden_wild_gen@pop)[2];  n_ind_G<-table(QUAC_garden_wild_gen@pop)[1];
QUAC_alleles_cap <- colSums(QUAC_seppop[[1]]@tab,na.rm=T)
##create a data frame with all of the alleles existing by species
for (i in 1:9) QUAC_all_exist[,i]<- (sum((QUAC_allele_cat[[i]])>0,na.rm=T))
QUAC_all_exist
##create alleles captured by gardens
n_ind_W<-table(QUAC_garden_wild_gen@pop)[2];  n_ind_G<-table(QUAC_garden_wild_gen@pop)[1];
QUAC_alleles_cap <- colSums(QUAC_seppop[[1]]@tab,na.rm=T)
##create a data frame with all of the alleles existing by species
for (i in 1:9) QUAC_all_exist[,i]<- (sum((QUAC_allele_cat[[i]])>0,na.rm=T))
##now determine how many wild alleles were captured per category
for (j in 1:length(QUAC_allele_cat)) QUAC_wild_capt[,j]<-round(sum(QUAC_alleles_cap[QUAC_allele_cat[[j]]]>0)/length(QUAC_allele_cat[[j]]),4)
QUAC_wild_capt
(sum((QUAC_allele_cat[[1]])>1,na.rm=T))
(sum((QUAC_allele_cat[[2]])>1,na.rm=T))
(sum((QUAC_allele_cat[[2]])>2,na.rm=T))
##duplicate list
dup_all_list <- c(0,1,2)
QUAC_allele_cat
sum(QUAC_allele_cat[[1]])
sum(QUAC_allele_cat[[1]])> 0
##now create a data frame of all the alleles that exist by category and that are duplicated
QUAC_all_exist <- matrix(nrow = length(dup_all_list), ncol = length(list_allele_cat))
##create a data frame with all of the alleles existing by category
for(k in 1:length(dup_all_list)){
for (i in 1:9) QUAC_all_exist[k,i]<- (sum((QUAC_allele_cat[[i]])> paste0(dup_all_list[[k]]),na.rm=T))
}
QUAC_all_exist
##now determine how many wild alleles were captured per category
#create a data frame to store %s
QUAC_wild_capt <- matrix(nrow = length(dup_all_list), ncol = length(list_allele_cat))
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
QUAC_allele_cat <- get.allele.cat(QUAC_garden_wild_genpop, c(1:2), 2, n_ind_p_pop)
##now determine how many wild alleles were captured per category
#create a data frame to store %s
QUAC_wild_capt <- matrix(nrow = length(dup_all_list), ncol = length(list_allele_cat))
for(k in 1:length(dup_all_list)){
for (j in 1:length(QUAC_allele_cat)) QUAC_wild_capt[k,j]<-round(sum(QUAC_alleles_cap[QUAC_allele_cat[[j]]] >
paste0(dup_all_list[[k]]))/
length(QUAC_allele_cat[[j]]),4)
}
QUAC_wild_capt
##combine this into one table
QUAC_allele_cap_table <- matrix(nrow = length(dup_all_list), ncol = length(list_allele_cat))
##add rownames and colnames
colnames(QUAC_allele_cap_table) <- list_allele_cat
QUAC_allele_cap_table
QUAC_allele_cat
QUAC_allele_cat > 0
QUAC_allele_cat[[1]] > 0
sum(QUAC_allele_cat[[1]] > 0)
sum(QUAC_allele_cat[[1]] > 1)
sum(QUAC_allele_cat[[1]] > 2)
##add rownames and colnames
colnames(QUAC_allele_cap_table) <- list_allele_cat
##run loop to generate table
for(m in 1:length(QUAC_all_exist[1,])){
QUAC_allele_cap_table[,m] <- paste0(signif((QUAC_wild_capt[,m]*100),3), "%", "(", signif(QUAC_all_exist[,m],3), ")")
}
QUAC_allele_cap_table
##combine this into one table
QUAC_allele_cap_table <- matrix(nrow = 1, ncol = length(list_allele_cat))
##add rownames and colnames
colnames(QUAC_allele_cap_table) <- list_allele_cat
##run loop to generate table
for(m in 1:length(QUAC_all_exist[1,])){
QUAC_allele_cap_table[,m] <- paste0(signif((QUAC_wild_capt[,m]*100),3), "%", "(", signif(QUAC_all_exist[,m],3), ")")
}
##create a data frame with all of the alleles existing by category
for (i in 1:9) QUAC_all_exist[,i]<- (sum((QUAC_allele_cat[[i]])> paste0(dup_all_list[[k]]),na.rm=T))
##now determine how many wild alleles were captured per category
for (j in 1:length(QUAC_allele_cat)) QUAC_wild_capt[,j]<-round(sum(QUAC_alleles_cap[QUAC_allele_cat[[j]]] > 0)/length(QUAC_allele_cat[[j]]),4)
##add to this data frame the number of individuals in gardens
QUAC_wild_capt[,10] <- n_ind_G
##combine this into one table
QUAC_allele_cap_table <- matrix(nrow = 1, ncol = length(list_allele_cat))
##add rownames and colnames
colnames(QUAC_allele_cap_table) <- list_allele_cat
##add rownames and colnames
colnames(QUAC_allele_cap_table) <- list_allele_cat
QUAC_wild_capt
QUAC_wild_capt

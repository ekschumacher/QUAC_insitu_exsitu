library(adegenet)
library(diveRsity)
library(ggplot2)
#########################
#     Load in Files     #
#########################
#set working directory
setwd("../../QUAC_data_files")
###############
#     PCA     #
###############
##load data lists
#arp data file list
QUAC_PCA_gen <- list.files(pattern = ".arp", path = "QUAC_adegenet_files/Relate_Red")
#data frame list
QUAC_PCA_df <- list.files(pattern = "PCA_df.csv", path = "QUAC_data_frames/Relate_Red")
##create PCA list
QUAC_PCA <- list()
#results pathway
QUAC_clustering_results <- "C:/Users/eschumacher/Documents/GitHub/QUAC_insitu_exsitu/QUAC_analyses/Results/Clustering/"
#loop to run PCA analysis on different population sets
for(pops in 1:length(QUAC_PCA_gen)){
#comment in if you need to convert .arp files to genepop files
#arp2gen(paste0("QUAC_adegenet_files/Relate_Red/", QUAC_PCA_gen[[pops]]))
#read in genepop files as a genind object
QUAC_gen <- read.genepop(paste0("QUAC_adegenet_files/Relate_Red/",gsub("\\..*","",QUAC_PCA_gen[[pops]]), ".gen"), ncode = 3)
#load in data frames
QUAC_df <- read.csv(paste0("QUAC_data_frames/Relate_Red/", QUAC_PCA_df[[pops]]))
#name rows in the genind object
rownames(QUAC_gen@tab) <- QUAC_df[,1]
#name pops
levels(QUAC_gen@pop) <- unique(QUAC_df$Pop)
#create tab object for genind
QUAC_tab <- tab(QUAC_gen, freq=TRUE, NA.method="mean")
#run PCA
QUAC_PCA[[pops]] <- dudi.pca(QUAC_tab, scale = FALSE, nf = 2, scannf = FALSE)
#create PCA data frame
QUAC_PCA_df_temp <- data.frame(cbind(as.numeric(QUAC_PCA[[pops]]$li$Axis1),
as.numeric(QUAC_PCA[[pops]]$li$Axis2),
QUAC_df$Pop))
colnames(QUAC_PCA_df_temp) <- c("Axis1","Axis2","Pop")
#calculate % variation explained by axis
QUAC_pc1 <- signif(((QUAC_PCA[[pops]]$eig[1])/sum(QUAC_PCA[[pops]]$eig))*100, 3)
QUAC_pc2 <- signif(((QUAC_PCA[[pops]]$eig[2])/sum(QUAC_PCA[[pops]]$eig))*100, 3)
##plot PCA
#write pdf file
pdf(paste0(QUAC_clustering_results, gsub("\\..*","",QUAC_PCA_gen[[pops]]), "_PCA.pdf"),width = 10, height = 8)
print(ggplot(QUAC_PCA_df_temp, aes(as.numeric(Axis1), as.numeric(Axis2), col = Pop)) + geom_point() +
scale_x_continuous(limits = c(-2,2)) +
scale_y_continuous(limits = c(-2.5,2)) +
xlab(paste0("PC1 (", QUAC_pc1, "%)")) +
ylab(paste0("PC2 (", QUAC_pc2, "%)")) +
theme_bw() + stat_ellipse() +
scale_color_manual(values=hcl.colors(n = length(unique(QUAC_PCA_df_temp$Pop)), palette = "viridis")))
dev.off()
}
sessionInfo()

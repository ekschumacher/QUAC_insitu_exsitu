QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df$Ind,]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-3], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df$Ind %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
##now read in genepop file as a genind for adegenet
QUAC_gen <- read.genepop("QUAC_adegenet_files/QUAC_allpop.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_df <- read.csv("QUAC_data_frames/QUAC_final_scores.csv")
##rename individuals in the genind object
rownames(QUAC_gen@tab) <- QUAC_df[,1]
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$POP)
QUAC_df[,1]
QUAC_df <- QUAC_df[1:463,]
##rename individuals in the genind object
rownames(QUAC_gen@tab) <- QUAC_df[,1]
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$POP)
levels(QUAC_gen@pop) <- QUAC_popnames
head(QUAC_gen@tab)
############################################################
#    Remove Clones and Individuals with missing data       #
############################################################
###clone check
#convert to genelcone object
QUAC_geneclone <- as.genclone(QUAC_gen)
#identify multi-locus genotypes (non-clones)
QUAC_gen_id <- mlg.id(QUAC_geneclone)
#function to pull out all clones into a list
QUAC_clone_index <- which(sapply(QUAC_gen_id, function(x) length(x)>1))
#create a list of ID with clones
clones_ID <- list()
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[QUAC_clone_index[[clones]]]]
#now remove clones from the matrix
QUAC_noclones <- clonecorrect(QUAC_geneclone)
#convert back to a genind object
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals, there were 7 clones
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE) ##there were 7 individuals with too much missing data, left with 449 individuals
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_clean_df <- QUAC_df[QUAC_df$Ind %in% rownames(QUAC_genind_nomd@tab),]
#################################
#      Relatedness Analysis     #
#################################
##create pop type list
pop_type_list <- c("Garden", "Wild")
##create list to store related individuals in each pop type
QUAC_ind_red_list <- list()
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df$Ind,]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-3], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df$Ind %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_clean_df <- QUAC_df[QUAC_df[,1] %in% rownames(QUAC_genind_nomd@tab),]
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE) ##there were 7 individuals with too much missing data, left with 449 individuals
QUAC_genind_nomd
rownames(QUAC_genind_nomd@tab)
##load relatedness data frame for relatedness analysis
QUAC_df <- read.csv("QUAC_data_frames/QUAC_final_scores.csv")
QUAC_df <- QUAC_df[1:463,]
##rename individuals in the genind object
rownames(QUAC_gen@tab) <- QUAC_df[,1]
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$POP)
levels(QUAC_gen@pop) <- QUAC_popnames
QUAC_genind_nomd[,1]
QUAC_df[,1]
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_clean_df <- QUAC_df[QUAC_df[,1] %in% rownames(QUAC_genind_nomd@tab),]
#################################
#      Relatedness Analysis     #
#################################
##create pop type list
pop_type_list <- c("Garden", "Wild")
##create list to store related individuals in each pop type
QUAC_ind_red_list <- list()
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df$Ind,]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-3], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df$Ind %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df$Ind,]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-3], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df[,1] %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df[,1],]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-3], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df[,1] %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
QUAC_df[,1]
QUAC_ind_red_list[[1]]
length(QUAC_ind_red_list[[1]])
277-127
150/277
unique(QUAC_halfsib_names)
length(unique(QUAC_halfsib_names))
length(unique(QUAC_halfsib_names_cleanfront))
length(unique(QUAC_halfsib_names_cleanback))
277-127
QUAC_halfsib_names_cleanback
##now read in genepop file as a genind for adegenet
QUAC_gen <- read.genepop("QUAC_adegenet_files/QUAC_allpop.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_df <- read.csv("QUAC_data_frames/QUAC_allpop.csv")
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
#########################
#   Load Data Files     #
#########################
#set working directory to load in data files
setwd("../../QUAC_data_files")
##now read in genepop file as a genind for adegenet
QUAC_gen <- read.genepop("QUAC_adegenet_files/QUAC_allpop.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_df <- read.csv("QUAC_data_frames/QUAC_allpop.csv")
##rename individuals in the genind object
rownames(QUAC_gen@tab) <- QUAC_df[,1]
rownames(QUAC_gen@tab)
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$POP)
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$Pop)
levels(QUAC_gen@pop) <- QUAC_popnames
############################################################
#    Remove Clones and Individuals with missing data       #
############################################################
###clone check
#convert to genelcone object
QUAC_geneclone <- as.genclone(QUAC_gen)
#identify multi-locus genotypes (non-clones)
QUAC_gen_id <- mlg.id(QUAC_geneclone)
#function to pull out all clones into a list
QUAC_clone_index <- which(sapply(QUAC_gen_id, function(x) length(x)>1))
#create a list of ID with clones
clones_ID <- list()
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[QUAC_clone_index[[clones]]]]
#now remove clones from the matrix
QUAC_noclones <- clonecorrect(QUAC_geneclone)
#convert back to a genind object
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals, there were 7 clones
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE) ##there were 7 individuals with too much missing data, left with 449 individuals
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_clean_df <- QUAC_df[QUAC_df[,1] %in% rownames(QUAC_genind_nomd@tab),]
#################################
#      Relatedness Analysis     #
#################################
##create pop type list
pop_type_list <- c("Garden", "Wild")
##create list to store related individuals in each pop type
QUAC_ind_red_list <- list()
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df[,1],]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-3], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df[,1] %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
199-127
QUAC_df <- read.csv("QUAC_data_frames/Garden_Wild/QUAC_garden_allpop_clean_df.csv")
View(QUAC_df)
QUAC_df <- QUAC_df[,-1]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df, object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- unique(names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25)))
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df, object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list <- unique(QUAC_halfsib_names_cleanback)
length(QUAC_ind_red_list)
QUAC_df <- read.csv("QUAC_data_frames/Garden_Wild/QUAC_garden_clean_df.csv")
QUAC_df <- QUAC_df[,-1]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df, object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list <- unique(QUAC_halfsib_names_cleanback)
length(QUAC_ind_red_list)
#################################
#      Relatedness Analysis     #
#################################
##create pop type list
pop_type_list <- c("Garden", "Wild")
##create list to store related individuals in each pop type
QUAC_ind_red_list <- list()
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df[,1],]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-2], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df[,1] %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
#########################
#   Load Data Files     #
#########################
#set working directory to load in data files
setwd("../../QUAC_data_files")
##now read in genepop file as a genind for adegenet
QUAC_gen <- read.genepop("QUAC_adegenet_files/QUAC_allpop.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_df <- read.csv("QUAC_data_frames/QUAC_allpop.csv")
##rename individuals in the genind object
rownames(QUAC_gen@tab) <- QUAC_df[,1]
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$Pop)
levels(QUAC_gen@pop) <- QUAC_popnames
levels(QUAC_gen@pop)
############################################################
#    Remove Clones and Individuals with missing data       #
############################################################
###clone check
#convert to genelcone object
QUAC_geneclone <- as.genclone(QUAC_gen)
#identify multi-locus genotypes (non-clones)
QUAC_gen_id <- mlg.id(QUAC_geneclone)
#function to pull out all clones into a list
QUAC_clone_index <- which(sapply(QUAC_gen_id, function(x) length(x)>1))
#create a list of ID with clones
clones_ID <- list()
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[QUAC_clone_index[[clones]]]]
#now remove clones from the matrix
QUAC_noclones <- clonecorrect(QUAC_geneclone)
#convert back to a genind object
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals, there were 7 clones
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE) ##there were 7 individuals with too much missing data, left with 449 individuals
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_clean_df <- QUAC_df[QUAC_df[,1] %in% rownames(QUAC_genind_nomd@tab),]
View(QUAC_clean_df)
##create list to store related individuals in each pop type
QUAC_ind_red_list <- list()
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df[,1],]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-2], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df[,1] %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}
QUAC_df <- read.csv("QUAC_data_frames/Garden_Wild/QUAC_garden_clean_df.csv")
QUAC_df <- QUAC_df[,-1]
View(QUAC_df)
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df, object = T, value = "loiselle")
QUAC_df <- read.csv("QUAC_data_frames/Garden_Wild/QUAC_garden_clean_df.csv")
QUAC_df <- QUAC_df[,-1]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df, object = T, value = "loiselle")
View(QUAC_df)
QUAC_df <- read.csv("QUAC_data_frames/Garden_Wild/QUAC_garden_clean_df.csv")
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df, object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("_.*","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list <- unique(QUAC_halfsib_names_cleanback)
length(QUAC_ind_red_list)
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list <- unique(QUAC_halfsib_names_cleanback)
length(QUAC_ind_red_list)
##now read in genepop file as a genind for adegenet
QUAC_gen <- read.genepop("QUAC_adegenet_files/QUAC_allpop.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_df <- read.csv("QUAC_data_frames/QUAC_allpop.csv")
##rename individuals in the genind object
rownames(QUAC_gen@tab) <- QUAC_df[,1]
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$Pop)
levels(QUAC_gen@pop) <- QUAC_popnames
############################################################
#    Remove Clones and Individuals with missing data       #
############################################################
###clone check
#convert to genelcone object
QUAC_geneclone <- as.genclone(QUAC_gen)
#identify multi-locus genotypes (non-clones)
QUAC_gen_id <- mlg.id(QUAC_geneclone)
#function to pull out all clones into a list
QUAC_clone_index <- which(sapply(QUAC_gen_id, function(x) length(x)>1))
#create a list of ID with clones
clones_ID <- list()
for(clones in 1:length(QUAC_clone_index)) clones_ID[[clones]] <- QUAC_gen_id[[QUAC_clone_index[[clones]]]]
#now remove clones from the matrix
QUAC_noclones <- clonecorrect(QUAC_geneclone)
#convert back to a genind object
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals, there were 7 clones
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE) ##there were 7 individuals with too much missing data, left with 449 individuals
##remove the individuals from the relatedness df that have been removed for missing data and clones
QUAC_clean_df <- QUAC_df[QUAC_df[,1] %in% rownames(QUAC_genind_nomd@tab),]
#################################
#      Relatedness Analysis     #
#################################
##create pop type list
pop_type_list <- c("Garden", "Wild")
##create list to store related individuals in each pop type
QUAC_ind_red_list <- list()
##loop to calculate relatedness for garden and wild individuals and reduce data files for relatedness
for(pop_type in 1:length(pop_type_list)){
#limit data frame by pop_type
QUAC_df <- QUAC_clean_df[QUAC_clean_df$Garden_Wild == paste0(pop_type_list[[pop_type]]),]
#limit genind object by pop_type
QUAC_gen <- QUAC_genind_nomd[rownames(QUAC_genind_nomd@tab) %in% QUAC_df[,1],]
#calculate relatedness between all individuals for either wild or garden df
QUAC_rel <- Demerelate(QUAC_df[,-2], object = T, value = "loiselle")
#extract just the names of highly related inds (half-sib or more)
QUAC_halfsib_names <- names(which(unlist(QUAC_rel$Empirical_Relatedness) > 0.25))
##remove extra characters
QUAC_halfsib_names_cleanfront <-  gsub("^.*\\.","", QUAC_halfsib_names)
##remove extra name
QUAC_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_halfsib_names_cleanfront)
##create list of individuals to remove
QUAC_ind_red_list[[pop_type]] <- unique(QUAC_halfsib_names_cleanback)
##reduce data frame for related individuals
QUAC_rel_df <- QUAC_df[!QUAC_df[,1] %in% QUAC_ind_red_list[[pop_type]],]
##write csv of the reduced data frame
write.csv(QUAC_rel_df, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]], "_rel_df.csv"))
##now limit genind object by relatedness
QUAC_rel_gen <- QUAC_gen[!rownames(QUAC_gen@tab) %in% QUAC_ind_red_list[[pop_type]],]
##write out genalex file
genind2genalex(QUAC_rel_gen, paste0("QUAC_data_frames/Relate_Red/QUAC_", pop_type_list[[pop_type]],
"_rel_genalex.csv"), overwrite = TRUE)
}

library(adegenet)
library(diveRsity)
#####################################
############ Directories ############
#####################################
##set directory to all butternut files
QUAC_data_files <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_data_files"
QUAC_analysis_results <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_analyses\\Results"
########################################
########### Load in Files ##############
########################################
##first, load in reduced genind with no half siblings
QUAC_red_relate_gen <- read.genepop(paste0(QUAC_data_files, "\\QUAC_genind\\Relate_Red\\QUAC_relate_red.gen"), ncode = 3)
##load in data frame
QUAC_red_relate_df <- read.csv(paste0(QUAC_data_files, "\\QUAC_data_frames\\Relate_Red\\QUAC_relate_red_df.csv"))
###rename individuals
rownames(QUAC_red_relate_gen@tab) <- QUAC_red_relate_df$Ind
##create population document
QUAC_pop_names <- unique(QUAC_red_relate_df$Pop)
##name populations in genind file
levels(QUAC_red_relate_gen@pop) <- QUAC_pop_names
###load files to compare wild and garden individuals
QUAC_garden_wild_gen <- read.genepop(paste0(QUAC_data_files, "\\QUAC_genind\\Relate_Red\\QUAC_relate_red_garden_wild.gen"), ncode = 3)
##load file to name pops and inds
QUAC_garden_wild_df <- read.csv(paste0(QUAC_data_files, "\\QUAC_data_frames\\Relate_Red\\QUAC_relate_red_garden_wild_df.csv"))
##name inds and pops
rownames(QUAC_garden_wild_gen@tab) <- QUAC_garden_wild_df$Ind
levels(QUAC_garden_wild_gen@pop) <- unique(QUAC_garden_wild_df$Pop)
######load files for all wild pops compared to garden
QUAC_garden_allwildpop_gen <- read.genepop(paste0(QUAC_data_files, "\\QUAC_genind\\Relate_Red\\QUAC_relate_red_garden_allwildpop.gen"), ncode = 3)
##load data frame
QUAC_garden_allwildpop_df <- read.csv(paste0(QUAC_data_files, "\\QUAC_data_frames\\Relate_Red\\QUAC_relate_red_garden_allwildpop_df.csv"))
##rename rows and pops
rownames(QUAC_garden_allwildpop_gen@tab) <- QUAC_garden_allwildpop_df$Ind
levels(QUAC_garden_allwildpop_gen@pop) <- c("Garden","Porter","Magazine","Pryor","Sugarloaf","Kessler")
#####load files for just wild PCA
##genind
QUAC_wildpop_gen <- read.genepop(paste0(QUAC_data_files, "\\QUAC_genind\\Relate_Red\\QUAC_relate_red_allwildpop.gen"), ncode = 3)
##data frame
QUAC_wildpop_df <- read.csv(paste0(QUAC_data_files, "\\QUAC_data_frames\\Relate_Red\\QUAC_relate_red_allwildpop_df.csv"))
##rename with rows and individual names
rownames(QUAC_wildpop_gen@tab) <- QUAC_wildpop_df$Ind
levels(QUAC_wildpop_gen@pop) <- c("Porter","Magazine","Pryor","Sugarloaf","Kessler")
###########################
######### PCoA ############
###########################
####first PCA looking at all the different populations
##now run PCA code
QUAC_tab <- tab(QUAC_red_relate_gen, freq=TRUE, NA.method="mean")
##now create PCA tab
QUAC_pca <- dudi.pca(QUAC_tab, scale = FALSE)
QUAC_allpop_pca_df <- data.frame(cbind(QUAC_pca$li$Axis1, QUAC_pca$li$Axis2, QUAC_red_relate_df$Pop))
colnames(QUAC_allpop_pca_df) <- c("Axis1","Axis2","Pop")
##create new color column
QUAC_allpop_pca_df$Color <- NA
for(i in 1:length(QUAC_pop_names)){
QUAC_allpop_pca_df[QUAC_allpop_pca_df[,3] == QUAC_pop_names[[i]],][,4] <- funky(length(QUAC_pop_names))[[i]]
}
##figure out % variation explained
allpop_pc1 <- signif(((QUAC_pca$eig[1])/sum(QUAC_pca$eig))*100, 3)
allpop_pc2 <- signif(((QUAC_pca$eig[2])/sum(QUAC_pca$eig))*100, 3)
##create pdf of all pops
pdf(paste0(QUAC_analysis_results, "\\Clustering\\QUAC_allpop_pca.pdf"), width = 10, height = 8)
##create a diagram of all populations
plot(QUAC_allpop_pca_df[,1], QUAC_allpop_pca_df[,2], pch = 17, col = QUAC_allpop_pca_df[,4], ylim = c(-2,2), xlim = c(-2,3),
xlab = paste0('PC1 (',allpop_pc1, "%)"), ylab = paste0("PC2 (", allpop_pc2, "%)"))
abline(v = 0)
abline(h = 0)
legend("topright", legend = QUAC_pop_names, border = "black", bty = "o",
pt.cex = 1, cex = 0.8, pch = 17, col = unique(QUAC_allpop_pca_df[,4]), bg = "white")
dev.off()
##create a diagram of all populations
plot(QUAC_allpop_pca_df[,1], QUAC_allpop_pca_df[,2], pch = 17, col = QUAC_allpop_pca_df[,4], ylim = c(-2,2), xlim = c(-2,3),
xlab = paste0('PC1 (',allpop_pc1, "%)"), ylab = paste0("PC2 (", allpop_pc2, "%)"))
##create a data frame for the data frame
QUAC_allpop_pca_df <- data.frame(cbind(QUAC_pca$li$Axis1, QUAC_pca$li$Axis2, QUAC_red_relate_df$Pop))
###########################
######### PCoA ############
###########################
####first PCA looking at all the different populations
##now run PCA code
QUAC_tab <- tab(QUAC_red_relate_gen, freq=TRUE, NA.method="mean")
##now create PCA tab
QUAC_pca <- dudi.pca(QUAC_tab, scale = FALSE)
##create a data frame for the data frame
QUAC_allpop_pca_df <- data.frame(cbind(QUAC_pca$li$Axis1, QUAC_pca$li$Axis2, QUAC_red_relate_df$Pop))
colnames(QUAC_allpop_pca_df) <- c("Axis1","Axis2","Pop")
##create new color column
QUAC_allpop_pca_df$Color <- NA
for(i in 1:length(QUAC_pop_names)){
QUAC_allpop_pca_df[QUAC_allpop_pca_df[,3] == QUAC_pop_names[[i]],][,4] <- funky(length(QUAC_pop_names))[[i]]
}
##figure out % variation explained
allpop_pc1 <- signif(((QUAC_pca$eig[1])/sum(QUAC_pca$eig))*100, 3)
allpop_pc2 <- signif(((QUAC_pca$eig[2])/sum(QUAC_pca$eig))*100, 3)
##create pdf of all pops
pdf(paste0(QUAC_analysis_results, "\\Clustering\\QUAC_allpop_pca.pdf"), width = 10, height = 8)
##create a diagram of all populations
plot(QUAC_allpop_pca_df[,1], QUAC_allpop_pca_df[,2], pch = 17, col = QUAC_allpop_pca_df[,4], ylim = c(-2,2), xlim = c(-2,3),
xlab = paste0('PC1 (',allpop_pc1, "%)"), ylab = paste0("PC2 (", allpop_pc2, "%)"))
abline(v = 0)
abline(h = 0)
legend("topright", legend = QUAC_pop_names, border = "black", bty = "o",
pt.cex = 1, cex = 0.8, pch = 17, col = unique(QUAC_allpop_pca_df[,4]), bg = "white")
dev.off()
##PCA comparing overall wild and garden structure
#create tab document
QUAC_garden_wild_tab <- tab(QUAC_garden_wild_gen, freq=TRUE, NA.method="mean")
#now run PCA
QUAC_garden_wild_pca <- dudi.pca(QUAC_garden_wild_tab, scale = FALSE, scannf = FALSE, nf = 2)
##create pdf
pdf(paste0(QUAC_analysis_results, "\\Clustering\\QUAC_garden_wild_pca.pdf"), width = 10, height = 8)
s.class(QUAC_garden_wild_pca$li, fac=pop(QUAC_garden_wild_gen),
col=c("darkseagreen3", "forestgreen"),
axesel=FALSE, cstar=0, cpoint=2, clabel = 1, addaxes = TRUE)
dev.off()
###### PCA with garden + all wild pops
QUAC_garden_allwildpop_tab <- tab(QUAC_garden_allwildpop_gen, freq=TRUE, NA.method="mean")
##run PCA
QUAC_garden_allwildpop_pca <- dudi.pca(QUAC_garden_allwildpop_tab, scannf = 2, scale = FALSE)
QUAC_colors <- c("darkslategray3","dodgerblue2","darkgreen","darkorchid","lightcoral", "cadetblue4")
##write out PCoA
pdf(paste0(QUAC_analysis_results, "\\Clustering\\QUAC_garden_allwildpop_pca.pdf"))
s.class(QUAC_pca$li, fac=pop(QUAC_garden_allwildpop_gen),
col=QUAC_colors,
axesel=FALSE, cstar=0, cpoint=2, clabel = 1, addaxes = TRUE)
dev.off()
s.class(QUAC_pca$li, fac=pop(QUAC_garden_allwildpop_gen),
col=QUAC_colors,
axesel=FALSE, cstar=0, cpoint=2, clabel = 1, addaxes = TRUE)
##write out PCoA
pdf(paste0(QUAC_analysis_results, "\\Clustering\\QUAC_garden_allwildpop_pca.pdf"))
s.class(QUAC_pca$li, fac=pop(QUAC_garden_allwildpop_gen),
col=QUAC_colors,
axesel=FALSE, cstar=0, cpoint=2, clabel = 1, addaxes = TRUE)
dev.off()
#####PCA of all wild populations
##create tab document
QUAC_wildpop_tab <- tab(QUAC_wildpop_gen, freq=TRUE, NA.method="mean")
##run PCA
QUAC_wildpop_pca <- dudi.pca(QUAC_wildpop_tab, scannf = FALSE, nf = 2, scale = FALSE)
##calculate % variation explained by each axis
wildpop_pc1 <- signif(((QUAC_wildpop_pca$eig[1])/sum(QUAC_wildpop_pca$eig))*100, 3)
wildpop_pc2 <- signif(((QUAC_wildpop_pca$eig[2])/sum(QUAC_wildpop_pca$eig))*100, 3)
##write out data file
pdf(paste0(QUAC_analysis_results, "\\Clustering\\QUAC_wildpop_pca.pdf"), width = 10, height = 8)
s.class(QUAC_wildpop_pca$li, fac = pop(QUAC_wildpop_gen),
col = QUAC_colors[c(2:6)],
axesel=FALSE, cstar=0, cpoint=2, clabel = 1, addaxes = TRUE)
dev.off()
sessionInfo()
library(adegenet)
#####################################
############ Directories ############
#####################################
QUAC_data_files <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_data_files"
QUAC_analysis_results <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_analyses\\Results"
###############################################
####### Read in classification data frame #####
###############################################
setwd(QUAC_data_files)
##load in output data frames from Geneclass
QUAC_assignment_output <- list.files(path = "QUAC_geneclass", pattern = "output.csv$")
##list of data frames
QUAC_assignment_output_df <- list()
##data frame to store all of the results
QUAC_classification_percent <- matrix(nrow = 3, ncol = 4)
##list of data frames
QUAC_classification_samp_pop <- matrix(nrow = 146, ncol = 3)
##data frame to store % correct assignment for structured assignment
QUAC_classification_str_samp_pop <- matrix(nrow = 3, ncol = 1)
##read in data files
QUAC_assignment_output_df <- read.csv("QUAC_geneclass\\QUAC_geneclass_output.csv")
##now figure out # of times we have a yes
QUAC_assignment_correct <- QUAC_assignment_output_df[QUAC_assignment_output_df$Correct_Assignment == "Y",]
View(QUAC_assignment_correct)
length(QUAC_assignment_output_df[QUAC_assignment_output_df$Correct_Assignment == "Y",])
na.omit(QUAC_assignment_output_df[QUAC_assignment_output_df$Correct_Assignment == "Y",])
##now figure out # of times we have a yes
QUAC_assignment_correct <- na.omit(QUAC_assignment_output_df[QUAC_assignment_output_df$Correct_Assignment == "Y",])
View(QUAC_assignment_correct)
##now figure out %
length(QUAC_assignment_correct[1,])
##now figure out %
length(QUAC_assignment_correct[1,])/length(QUAC_assignment_output_df[,1])
##now figure out %
length(QUAC_assignment_correct[1,])/length(QUAC_assignment_output_df[,1])*100
##now try with structure pops
QUAC_assignment_correct_str_df <- read.csv("QUAC_geneclass\\QUAC_str_reorg_geneclass_output.csv")
##now figure out number of yes
QUAC_assignment_correct_str <- na.omit(QUAC_assignment_correct_str_df[QUAC_assignment_correct_str_df$Correct_Assignment == "Y",])
View(QUAC_assignment_correct_str)
##now figure out %
length(QUAC_assignment_correct[,1])/length(QUAC_assignment_output_df[,1])*100
##now calculate the percent
length(QUAC_assignment_correct_str[,1])/length(QUAC_assignment_correct_str_df[,1])*100
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
#####################################
############ Directories ############
#####################################
QUAC_data_files <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_data_files"
QUAC_analysis_results <- "C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_insitu_exsitu\\QUAC_analyses\\Results"
##############################################
############# Convert to Genind ##############
##############################################
##set working directory to load in data files
setwd(QUAC_data_files)
##now read in genind file
QUAC_allpop_gen <- read.genepop("QUAC_genind\\quac_allpop.gen", ncode = 3)
##load files to label population names and indvidual names
QUAC_allpop_df <- read.csv("QUAC_data_frames\\QUAC_allpop.csv")
##rename individuals in the genind file
rownames(QUAC_allpop_gen@tab) <- QUAC_allpop_df$ID
##rename population names
QUAC_popnames <- unique(QUAC_allpop_df$POP)
levels(QUAC_allpop_gen@pop) <- QUAC_popnames
##load document for relatedness analysis
QUAC_rel_df <- read.csv("QUAC_data_frames\\QUAC_rel_df.csv")
#######################################################################
############# Clone check, relatedness, and missing data ##############
#######################################################################
####run clone check
##convert to clone check format
QUAC_geneclone <- as.genclone(QUAC_allpop_gen)
##identify multi-locus genotypes (non-clones)
QUAC_gen_id <- mlg.id(QUAC_geneclone)
##function to pull out all clone lists
QUAC_clone_index <- which(sapply(QUAC_gen_id,function(x) length(x)>1))
##now remove clones from the matrix
QUAC_noclones <- clonecorrect(QUAC_geneclone)
##convert back to genind
QUAC_genind_nocl <- genclone2genind(QUAC_noclones) ##left with 456 individuals
QUAC_genind_nocl
table(QUAC_genind_nocl@pop)
##remove individuals with too much missing data
QUAC_genind_nomd <- missingno(QUAC_genind_nocl, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
QUAC_genind_nomd
####Relatedness analysis
##run relatedness analysis
QUAC_relatedness_df <- Demerelate(QUAC_rel_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_halfsib_names <- names(which(unlist(QUAC_relatedness_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
QUAC_halfsib_names_cleanfront <- gsub("^.*\\.","", QUAC_halfsib_names)
QUAC_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_halfsib_names_cleanfront)
QUAC_relate_ind_remove <- unique(QUAC_halfsib_names_cleanback) ##260 of these individuals have > 25% relatedness
##now limit genind by these names
QUAC_relate_red_gen <- QUAC_genind_nomd[!rownames(QUAC_genind_nomd@tab) %in% QUAC_relate_ind_remove,]
QUAC_relate_red_gen
table(QUAC_relate_red_gen@pop)
32+24+14+32+7
length(QUAC_relate_ind_remove)
449 - 260
##now limit genind by these names
QUAC_relate_red_gen <- QUAC_genind_nomd[!rownames(QUAC_genind_nomd@tab) %in% QUAC_relate_ind_remove,]
QUAC_relate_red_gen
##and export to genalex
genind2genalex(QUAC_relate_red_gen, file="QUAC_data_frames\\Relate_Red\\QUAC_relate_red_gen.csv")
##and export to genalex
genind2genalex(QUAC_relate_red_gen, file="QUAC_data_frames\\Relate_Red\\QUAC_relate_red_gen.csv", overwrite = TRUE)
##limit data frames
QUAC_red_relate_df <- QUAC_rel_df[!QUAC_rel_df$Ind %in% QUAC_relate_ind_remove,]
##write out file
write.csv(QUAC_red_relate_df, "QUAC_data_frames\\Relate_Red\\QUAC_red_relate_df.csv")
####Relatedness analysis
##run relatedness analysis
QUAC_relatedness_df <- Demerelate(QUAC_rel_df, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
QUAC_halfsib_names <- names(which(unlist(QUAC_relatedness_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
QUAC_halfsib_names_cleanfront <- gsub("^.*\\.","", QUAC_halfsib_names)
QUAC_halfsib_names_cleanback <- gsub("^.*\\_","", QUAC_halfsib_names_cleanfront)
QUAC_relate_ind_remove <- unique(QUAC_halfsib_names_cleanback) ##260 of these individuals have > 25% relatedness
##now limit genind by these names
QUAC_relate_red_gen <- QUAC_genind_nomd[!rownames(QUAC_genind_nomd@tab) %in% QUAC_relate_ind_remove,]
length(QUAC_relate_ind_remove)
449 - 260
##read in data files
QUAC_assignment_output_df <- read.csv("QUAC_geneclass\\Assignment_red.CSV")
##read in data files
QUAC_assignment_output_df <- read.csv(paste0(QUAC_analysis_results, "\\Clustering\\Assignment_red.csv"))
##now figure out # of times we have a yes
QUAC_assignment_correct <- na.omit(QUAC_assignment_output_df[QUAC_assignment_output_df$Correct_Assignment == "Y",])
##now figure out %
length(QUAC_assignment_correct[,1])/length(QUAC_assignment_output_df[,1])*100
length(QUAC_assignment_correct[,1])
##now try with structure pops
QUAC_assignment_correct_str_df <- read.csv("QUAC_geneclass\\assignment_red_3pop.csv")
##now try with structure pops
QUAC_assignment_correct_str_df <- read.csv(paste0(QUAC_analysis_results, "\\Clustering\\assignment_red_3pop.csv"))
##now figure out number of yes
QUAC_assignment_correct_str <- na.omit(QUAC_assignment_correct_str_df[QUAC_assignment_correct_str_df$Correct_Assignment == "Y",])
##now calculate the percent
length(QUAC_assignment_correct_str[,1])/length(QUAC_assignment_correct_str_df[,1])*100
length(QUAC_assignment_correct_str[,1])
##load in output data frames from Geneclass
QUAC_assignment_output <- list.files(path = "QUAC_analyses\\Results\\Clustering\\", pattern = "output.csv$")
QUAC_analyses\Results\Clustering
QUAC_assignment_output
paste0(QUAC_analysis_results, "\\Clustering")
##load in output data frames from Geneclass
QUAC_assignment_output <- list.files(path = paste0(QUAC_analysis_results, "\\Clustering"), pattern = "output.csv$")
QUAC_assignment_output
##load in output data frames from Geneclass
setwd(paste0(QUAC_analysis_results, "\\Clustering"))
QUAC_assignment_output <- list.files(pattern = "assignment_")
QUAC_assignment_output
##data frame to store % correct assignment for structured assignment
QUAC_classification_str_samp_pop <- matrix(nrow = length(QUAC_assignment_output[,1]), ncol = 1)
length(QUAC_assignment_output)
##data frame to store % correct assignment for structured assignment
QUAC_classification_str_samp_pop <- matrix(nrow = length(QUAC_assignment_output), ncol = 1)
##loops to calculate % classification
for(i in 1:length(QUAC_assignment_output)){
##data frame loading
QUAC_assignment_output_df[[i]] <- read.csv(QUAC_assignment_output[[i]])
##fill in data frame for percent classification
QUAC_classification_percent[i,1] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,5] >= 25,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
QUAC_classification_percent[i,2] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,5] >= 50,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
##75% of the time
QUAC_classification_percent[i,3] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,5] >= 75,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
##95% of the time
QUAC_classification_percent[i,4] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,5] >= 95,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
}
QUAC_classification_percent
QUAC_assignment_output_df[[1]]
length(rownames(QUAC_assignment_output_df[[1]][QUAC_assignment_output_df[[1]][,5] >= 0.25,]))
QUAC_assignment_output_df[[1]]
QUAC_assignment_output_df[[1]][,5]
QUAC_assignment_output_df[[1]][,6]
length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 25,]))
QUAC_assignment_output_df[[1]][,6] >=25
##loops to calculate % classification
for(i in 1:length(QUAC_assignment_output)){
##data frame loading
QUAC_assignment_output_df[[i]] <- read.csv(QUAC_assignment_output[[i]])
##fill in data frame for percent classification
QUAC_classification_percent[i,1] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 25,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
QUAC_classification_percent[i,2] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 50,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
##75% of the time
QUAC_classification_percent[i,3] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 75,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
##95% of the time
QUAC_classification_percent[i,4] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 95,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
}
QUAC_classification_percent
#name rows and columns
rownames(QUAC_classification_percent) <- c("All Wild Pops", "Three Str Pops")
QUAC_assignment_output
length(QUAC_assignment_output)
##data frame to store all of the results
QUAC_classification_percent <- matrix(nrow = 2, ncol = 4)
##loops to calculate % classification
for(i in 1:length(QUAC_assignment_output)){
##data frame loading
QUAC_assignment_output_df[[i]] <- read.csv(QUAC_assignment_output[[i]])
##fill in data frame for percent classification
QUAC_classification_percent[i,1] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 25,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
QUAC_classification_percent[i,2] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 50,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
##75% of the time
QUAC_classification_percent[i,3] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 75,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
##95% of the time
QUAC_classification_percent[i,4] <- length(rownames(QUAC_assignment_output_df[[i]][QUAC_assignment_output_df[[i]][,6] >= 95,]))/(length(rownames(QUAC_assignment_output_df[[i]])))*100
}
QUAC_classification_percent
#name rows and columns
rownames(QUAC_classification_percent) <- c("All Wild Pops", "Three Str Pops")
colnames(QUAC_classification_percent) <- c("Assign_25%","Assign_50%","Assign_75%","Assign_95%")
##write out data frames
write.csv(QUAC_classification_percent, paste0(QUAC_analysis_results, "\\Clustering\\percent_assignment.csv"))
